-- liquibase formatted sql
-- changeset iOvcharenko:1
CREATE TYPE work_description AS ENUM (
    'MIXING',
    'MASTERING',
    'PRODUCING',
    'EDITING',
    'WRITING'
    );

CREATE TABLE IF NOT EXISTS request
(
    request_id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    request_name     varchar(128)             not null,
    band_name        varchar(128)             not null,
    count_of_track   bigint                   not null,
    total_amount     decimal                  null,
    deadline         timestamp with time zone null,
    multitrack_link  text                     not null,
    band_email       varchar(128)             not null,
    work_description work_description[]       null,
    request_status   varchar(64)
);

create table if not exists release
(
    release_id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    band_name           varchar(128)             not null,
    work_description    work_description[]       null,
    album_cover_link    text                     null,
    social_network_link text                     null,
    count_of_track      bigint                   not null,
    release_dttm        timestamp with time zone null,
    music_label         varchar(128)             null,
    genre               varchar(64)              not null,
    request_id          bigint                   not null
);

alter table release
    add constraint fk_release_for_request foreign key (request_id)
        references request (request_id)
        on delete restrict on update restrict;

comment on table release is
    'Таблица релизов';
comment on column release.release_id is
    'Ид релиза';
comment on column release.band_name is
    'Название группы';
comment on column release.work_description is
    'Пожелания по звуку, описание работы';
comment on column release.album_cover_link is
    'Ссылка на обложку релиза';
comment on column release.social_network_link is
    'Ссылка на релиз';
comment on column release.count_of_track is
    'Количество треков';
comment on column release.release_dttm is
    'Дата релиза';
comment on column release.music_label is
    'Лейбл на котором издается релиз';
comment on column release.genre is
    'Жанр релиза';

create table if not exists instrument
(
    instrument_id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    instrument_type           varchar(128) not null,
    instrument_model          varchar(128) null,
    instrument_tone_stack     text         null,
    instrument_tone_stack_img text         null,
    release_id                bigint       not null
);
comment on table instrument is
    'Таблица остальных инструментов';
comment on column instrument.instrument_type is
    'Тип инстурмента, например перкуссия или струнный';
comment on column instrument.instrument_model is
    'Модель инструмента';
comment on column instrument.instrument_tone_stack is
    'Цепочка эффектов инструмента';
comment on column instrument.instrument_tone_stack_img is
    'Скрин или фото цепочки эффектов инструмента';
alter table instrument
    add constraint fk_instrument_for_release foreign key (release_id)
        references release (release_id)
        on delete restrict on update restrict;

create table if not exists price
(
    price_id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mixing     numeric null,
    mastering  numeric null,
    editing    numeric null,
    producing  numeric null,
    discount   numeric null,
    number_of_songs bigint null,
    request_id bigint  not null
);
comment on table price is
    'Таблица расчета цены за работу';
comment on column price.price_id is
    'Ид цены';
comment on column price.mixing is
    'Цена сведения';
comment on column price.mastering is
    'Цена мастеринга';
comment on column price.editing is
    'Цена редактирования';
comment on column price.producing is
    'Цена продюсирования';
comment on column price.discount is
    'Скидка в процентах';
comment on column  price.number_of_songs is
    'Количество песен';


alter table price
    add constraint fk_price_for_request foreign key (request_id)
        references request (request_id)
        on delete restrict on update restrict;

create table if not exists drums
(
    drums_id    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    drums_type  varchar(128) not null,
    drums_model text         null,
    drums_mics  text         null,
    drums_img   text         null,
    release_id  bigint       not null
);

comment on table drums is
    'Таблица информации о барабанах';
comment on column drums.drums_id is
    'Ид барабанов';
comment on column drums.drums_type is
    'Тип барабанов живые\семплы';
comment on column drums.drums_model is
    'Кит используемый на релизе';
comment on column drums.drums_mics is
    'Микрофоны поканально';
comment on column drums.drums_img is
    'Фото или скрин барабанов\пресета';

alter table drums
    add constraint fk_drums_for_release foreign key (release_id)
        references release (release_id)
        on delete restrict on update restrict;

create table if not exists guitar
(
    guitar_id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    guitar_type    varchar(128) not null,
    guitar_model   varchar(128) null,
    tone_stack     varchar(128) null,
    tone_stack_img text         null,
    release_id     bigint       not null,
    studio_id      bigint       null
);

comment on table guitar is
    'Табица гитар';
comment on column guitar.guitar_id is
    'Ид гитары';
comment on column guitar.guitar_type is
    'Тип гитары электро\акустика и тд';
comment on column guitar.guitar_model is
    'Модель гитары';
comment on column guitar.tone_stack is
    'Цепочка эффектов';
comment on column guitar.tone_stack_img is
    'Фото или скрин цепочки эффектов';

alter table guitar
    add constraint fk_guitar_for_release foreign key (release_id)
        references release (release_id)
        on delete restrict on update restrict;

create table if not exists vocal
(
    vocal_id        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    vocal_type      varchar(128) not null,
    vocal_technique varchar(128) null,
    vocal_mic       varchar(128) null,
    release_id      bigint       not null
);

comment on table vocal is
    'Таблица вокалов';
comment on column vocal.vocal_id is
    'Id вокалов';
comment on column vocal.vocal_type is
    'Типа вокала основной\бэк вокал и тд';
comment on column vocal.vocal_technique is
    'Техника исполнения';
comment on column vocal.vocal_mic is
    'Какой микрофон использовался на записи';

alter table vocal
    add constraint fk_vocal_for_release foreign key (release_id)
        references release (release_id)
        on delete restrict on update restrict;

create table if not exists studio
(
    studio_id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    studio_name         varchar(128) not null,
    studio_place        text         null,
    social_network_link text         null,
    instrument_id       bigint       null,
    guitar_id           bigint       null,
    vocal_id            bigint       null,
    drums_id            bigint       null
);
comment on table studio is
    'Таблица студии на которой записывался инструмент';
comment on column studio.studio_name is
    'Название студии';
comment on column studio.studio_place is
    'Местоположение студии';
comment on column studio.social_network_link is
    'Ссылка на студию';

ALTER TABLE studio
    ADD CONSTRAINT fk_for_drums FOREIGN KEY (drums_id)
        REFERENCES drums (drums_id)
        ON DELETE RESTRICT ON UPDATE RESTRICT,

    ADD CONSTRAINT fk_for_instrument FOREIGN KEY (instrument_id)
        REFERENCES instrument (instrument_id)
        ON DELETE RESTRICT ON UPDATE RESTRICT,

    ADD CONSTRAINT fk_for_vocal FOREIGN KEY (vocal_id)
        REFERENCES vocal (vocal_id)
        ON DELETE RESTRICT ON UPDATE RESTRICT,

    ADD CONSTRAINT fk_for_guitar FOREIGN KEY (guitar_id)
        REFERENCES guitar (guitar_id)
        ON DELETE RESTRICT ON UPDATE RESTRICT;